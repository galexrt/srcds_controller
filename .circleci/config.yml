version: 2
jobs:
  build:
    working_directory: /go/src/github.com/galexrt/srcds_controller
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      DOCKER_IMAGE_NAME: galexrt/srcds_controller
      QUAY_IMAGE_NAME: quay.io/galexrt/srcds_controller
      DOCKER_TEST_IMAGE_NAME: quay.io/prometheus/golang-builder:1.13-base
      REPO_PATH: github.com/galexrt/srcds_controller
    docker:
    - image: circleci/golang:1.13
    steps:
    - run: |
        sudo chown circleci:circleci -R /go
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        name: Install Docker client and github-release, and set PATH
        command: |
          set -x
          VER="19.03.5"
          curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
          tar -xz -C /tmp -f /tmp/docker-$VER.tgz
          sudo mv /tmp/docker/* /usr/bin
          sudo curl -L 'https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2' | sudo tar xvjf - --strip-components 3 -C /usr/local/bin
          echo -e "export PATH=$PATH:/usr/local/go/bin:/go/bin" >> "$BASH_ENV"
    - run: make promu
    - setup_remote_docker:
        docker_layer_caching: false
    - run: docker info
    - run:
        name: Copy data files
        command: |
          docker create -v "$(pwd)":"$(pwd)" --name app alpine:3.4 /bin/true
          docker cp . app:"$(pwd)"
    - run: promu crossbuild
    - run:
        name: Copy built binaries back
        command: |
          docker cp app:"$(pwd)/.build" .
          mkdir $CIRCLE_ARTIFACTS/binaries/ && cp -a .build/* $CIRCLE_ARTIFACTS/binaries/
          [ -e srcds_controller ] && rm srcds_controller
          ln -sfn .build/linux-amd64/srcds_controller srcds_controller
    - run:
        name: Build Docker images
        command: |
          if [ -n "$CIRCLE_TAG" ]; then
              make docker DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME DOCKER_IMAGE_TAG=runner-$CIRCLE_TAG
              make docker DOCKER_IMAGE_NAME=$QUAY_IMAGE_NAME DOCKER_IMAGE_TAG=runner-$CIRCLE_TAG
              promu crossbuild tarballs
              promu checksum .tarballs
              promu release .tarballs
              mkdir $CIRCLE_ARTIFACTS/releases/ && cp -a .tarballs/* $CIRCLE_ARTIFACTS/releases/
          else
              DOCKER_IMAGE_TAG="$(git rev-parse --abbrev-ref HEAD | sed 's|/|-|g')"
              make docker DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME DOCKER_IMAGE_TAG=runner-$DOCKER_IMAGE_TAG
              make docker DOCKER_IMAGE_NAME=$QUAY_IMAGE_NAME DOCKER_IMAGE_TAG=runner-$DOCKER_IMAGE_TAG
          fi
          docker images
    - run:
        name: docker login to Docker Hub and Quay.io
        command: |
          docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
          docker login -u $QUAY_LOGIN -p $QUAY_PASSWORD quay.io
    - run:
        name: docker push to Docker Hub and Quay.io
        command: |
          set -x
          if [[ "$CIRCLE_TAG" =~ ^v[0-9]+(\.[0-9]+){2}.*$ ]]; then
              docker push "$DOCKER_IMAGE_NAME":"runner-$CIRCLE_TAG"
              docker push "$QUAY_IMAGE_NAME":"runner-$CIRCLE_TAG"
              docker tag "$DOCKER_IMAGE_NAME":"runner-$CIRCLE_TAG" "$DOCKER_IMAGE_NAME":"runner-latest"
              docker tag "$QUAY_IMAGE_NAME":"runner-$CIRCLE_TAG" "$QUAY_IMAGE_NAME":"runner-latest"
              docker push "$DOCKER_IMAGE_NAME":"runner-latest"
              docker push "$QUAY_IMAGE_NAME":"runner-latest"
          else
              DOCKER_IMAGE_TAG="$(git rev-parse --abbrev-ref HEAD | sed 's|/|-|g')"
              docker push "$DOCKER_IMAGE_NAME":"runner-$DOCKER_IMAGE_TAG"
              docker push "$QUAY_IMAGE_NAME":"runner-$DOCKER_IMAGE_TAG"
          fi
    - store_test_results:
        path: /tmp/circleci-test-results
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
workflows:
  version: 2
  default:
    jobs:
    - build:
        filters:
          tags:
            ignore: /^$/
